// message.c

varargs void message( string mode, string msg, mixed ob, mixed exclude)
{
	int i, j, is_excluded;
	object* inv;
	string snooper;
	object snper;
	if( objectp( ob ) ){
	if( mode == "vision" || mode == "emote" || mode == "sound"
		|| mode == "tell_room" || mode == "say" )
	{
		inv = all_inventory( ob );
		for(i=0; i<sizeof(inv); i++)
		{
			if( inv[i]->query_temp("is_snooped") )
			{
				snooper = inv[i]->query_temp("snooper");
				snper = find_player(snooper);
				if( !snper )
				{
					inv[i]->set_temp("is_snooped",0);
					continue;
				}
				is_excluded = 0;
				for(j=0; j<sizeof(exclude); j++)
					if( inv[i] == exclude[j] )
					{
						is_excluded = 1;break;
					}
				if( is_excluded ) continue;
				efun::message("tell_object","%"+msg,snper);
			}
		}
	}
	if( ob->query_temp("is_snooped") )
	{
		snooper = ob->query_temp("snooper");
		snper = find_player(snooper);
		if( !snper )
			ob->set_temp("is_snooped",0);
		else efun::message("tell_object","%"+msg,snper);
	}
	}efun::message( mode, msg, ob, exclude);
}

varargs void message_vision(string msg, object me, object you)
{
	string my_gender, your_gender, my_name, your_name;
	string str1, str2, str3;

	my_name= me->name();
	my_gender = me->query("gender");
	str1 = replace_string(msg,  "$P", gender_self(my_gender));
	str1 = replace_string(str1, "$N", gender_self(my_gender));
	str3 = replace_string(msg,  "$P", my_name);
	str3 = replace_string(str3, "$N", my_name);
	if( you ) {
		your_name= you->name();
		your_gender= you->query("gender");
		str2 = replace_string(msg,  "$P", gender_pronoun(my_gender));
		str2 = replace_string(str2, "$p", gender_self(your_gender));
		str2 = replace_string(str2, "$N", my_name);
		str2 = replace_string(str2, "$n", gender_self(your_gender));
		message("vision", str2, you);
		str1 = replace_string(str1, "$p", gender_pronoun(your_gender));
		str1 = replace_string(str1, "$n", your_name);
		str3 = replace_string(str3, "$p", your_name);
		str3 = replace_string(str3, "$n", your_name);
	}
	message("vision", str1, me);
	message("vision", str3,  environment(me), ({ me, you}) );
}

varargs void message_combatd(string msg, object me, object you)
{
// 比武现场转播 start
	int userno;
	object *player;
// 比武现场转播 end
	string my_gender, your_gender, my_name, your_name;
	string str1, str2, str3;

	player = users();
	if (me->query("env/combatd")) return;
	my_name= me->name();
	my_gender = me->query("gender");
	str1 = replace_string(msg,  "$P", gender_self(my_gender));
	str1 = replace_string(str1, "$N", gender_self(my_gender));
	str3 = replace_string(msg,  "$P", my_name);
	str3 = replace_string(str3, "$N", my_name);
	if( you ) {
		if (you->query("env/combatd") && !userp(me)) return;
		your_name= you->name();
		your_gender= you->query("gender");
		str2 = replace_string(msg,  "$P", gender_pronoun(my_gender));
		str2 = replace_string(str2, "$p", gender_self(your_gender));
		str2 = replace_string(str2, "$N", my_name);
		str2 = replace_string(str2, "$n", gender_self(your_gender));
		message("vision", str2, you);
		str1 = replace_string(str1, "$p", gender_pronoun(your_gender));
		str1 = replace_string(str1, "$n", your_name);
		str3 = replace_string(str3, "$p", your_name);
		str3 = replace_string(str3, "$n", your_name);
	}
	message("vision", str1, me);
	message("vision", str3,  environment(me), ({ me, you}) );
// 比武现场转播 start
	if ((string)environment(me)->query("short") == "擂台")
	for (userno=0; userno<sizeof(player); userno++)
	    if ((player[userno])->query_temp("view_leitai") &&
		(player[userno]) != me &&
		(player[userno]) != you) 
	       tell_object(player[userno], str3);
// 比武现场转播 end
}
void tell_object(object ob, string str)
{
	message("tell_object", str, ob);
}

varargs void tell_room(mixed ob, string str, object *exclude)
{
	if( ob ) message("tell_room", str, ob, exclude);
}

void shout(string str)
{
	message("shout", str, users(), this_player());
}

void write(string str)
{
	if( this_player() )
		message("write", str, this_player());
	else if( previous_object() )
		message("write", str, previous_object());
	else
		efun::write(str);
}

varargs void say(string str, mixed exclude)
{
	if( living(previous_object()) )
		message("say", str, environment(previous_object()), previous_object());
	else if( this_player() )
		message("say", str, environment(this_player()), this_player());
}

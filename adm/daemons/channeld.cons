#include <ansi.h>
#include <mudlib.h>
#include <net/dns.h>

inherit F_DBASE;

//#define BLOCK_CHAT      0
//#define BLOCK_RUMOR     0
#define ALLOW_LIST ({ "ken" })

string remove_addresses(string, int);

mapping blocks = ([
	"all"  :	0,	
	"rumor":	0,
	"chat" :	0,
	"xkx"  :	0,
	"sing" :	0,
	"party":	0,
]);
mapping channels = ([

        "sys":  ([      "msg_speak": HIR "【系统】%s：%s\n" NOR,
                        "msg_emote": HIR "【系统】%s" NOR,
                        "wiz_only": 1,
                ]),

        "snp":  ([      "msg_speak": HIB "【窃听】%s：%s\n" NOR,
                        "msg_emote": HIB "【窃听】%s" NOR,
                        "wiz_only": 1,
                ]),

        "wiz":  ([      "msg_speak": HIY "【巫师】%s：%s\n" NOR,
                        "msg_emote": HIY "【巫师】%s" NOR,
                        "wiz_only": 1,
                        "intermud": GCHANNEL,
                        "intermud_emote": 1,
                        "channel": "wiz",
                        "omit_address": 0,
                        "filter":1,
                        "filter": (: $1["MUDLIB"]=="The story of Life" :)
                ]),

        // 97-10-18 this channel add for display debug message by ken@XAJH
        "debug":([      "msg_speak": HIW "【调试】%s：%s\n" NOR,
                        "msg_emote": HIW "【调试】%s" NOR,
                        "wiz_only": 1
                ]),

        "chat": ([      "msg_speak": HIC "【闲聊】%s：%s\n" NOR,
                        "msg_emote": HIC "【闲聊】%s" NOR,
                        "msg_color": HIC,
                ]),

        "rumor":([      "msg_speak": HIM "【谣言】%s：%s\n" NOR,
                        "msg_emote": HIM "【谣言】%s" NOR,
                        "anonymous": "某人",
                ]),
        "xkx":  ([      "msg_speak": YEL "【侠客行】%s：%s\n" NOR,
                        "msg_emote": YEL "【侠客行】%s" NOR,
                        "intermud": GCHANNEL,
                        "intermud_emote": 1,
                        "channel": "xkx",
                        "omit_address": 0,
                        "filter":1,
                        "filter": (: $1["MUDLIB"]=="The story of Life" :)
                ]),
        "sing": ([      "msg_speak": HIG "【歌唱】%s唱道：%s......\n" NOR,
                        "msg_emote": HIG "【歌唱】%s" NOR,
                ]),
        "party":([      "msg_speak": HIG "【门派】%s：%s\n" NOR,
                        "msg_emote": HIG "【门派】%s" NOR,
                        "party_only": 1
                ]),
]);
string party;

void create()
{
        // This is required to pass intermud access check.
        seteuid(getuid());
        set("channel_id", "频道精灵");
}

// 增加函数set_block和query_block，用来设置和判断所有玩家的公共频道情况。 Added by Spacenet@FXLT
int set_block(string ch_name, int val)
{
	return (blocks[ch_name] = val);
}

int query_block(string ch_name)
{
	return (blocks[ch_name]);
}
	
varargs int do_channel(object me, string verb, string arg, int emote,int remote)
{
        object *ob;
        string *tuned_ch, who;
        string arg_bk,self_emote;
        self_emote = arg;

        // Check if this is a channel emote. 所有频道动作的长度都大于2
        if( sizeof(verb) > 2 ) {
                if( verb[sizeof(verb)-1] == '*' ) {
                        emote = 1;
                        verb = verb[0..<2];
                        }
                if( verb[sizeof(verb)-1] == '#' ) {
                        emote = 2;
                        verb = verb[0..<2];
                }
        }

        // Check if this is a channel messsage.
        if( !mapp(channels) || undefinedp(channels[verb]) ) return 0;

        //now we can be sure it's indeed a channel message:
        if (!stringp(arg) || arg == "" || arg == " ") arg = "...";

        if (remote) arg_bk = arg;

        // check if one can write to channels
        // 改动了chblk和unchblk指令，此处可略。 Modified by Spacenet@FXLT
        /* if ( me->query("chblk_on") ) {
                me->set("chblk_rumor", 1);
                me->set("chblk_chat", 1);
                me->set("chblk_sing",1);
                me->set("chblk_xkx",1);
                me->set("chblk_party",1);
        } */
              
        
        // 增加对所有人的公共频道是否被巫师关闭的判断。Added by Spacenet@FXLT
        if (query_block(verb) || (query_block("all") && (verb == "rumor" || verb == "chat"
           || verb == "sing" || verb == "xkx" || verb == "party")))
        	return notify_fail("这个公共频道已经被巫师关闭了！\n");
	
	if (me->query("chblk_on"))
		return notify_fail("你所有的频道都被关闭了！\n");
        if (me->query("chblk_rumor") && (verb == "rumor"))
        	return notify_fail("你的谣言频道被关闭了！\n");

        if (me->query("chblk_chat") && (verb == "chat"))
        	return notify_fail("你的聊天频道被关闭了！\n");

        if (me->query("chblk_sing") && (verb == "sing"))
        	return notify_fail("你的音乐频道被关闭了！\n");

        if (me->query("chblk_xkx") && (verb == "xkx"))
        	return notify_fail("你的侠客行频道被关闭了！\n");

        if (me->query("chblk_party") && (verb == "party"))
        	return notify_fail("你的门派频道被关闭了！\n");

	// player broadcasting need consume jing
        if( userp(me) && !wizardp(me) && verb == "rumor" )
                if(me->query("jing") > 50) me->add("jing", 0-random(36));
                else  return notify_fail("你已经没力气散播谣言了！\n");

        if( userp(me) ) {

                if( channels[verb]["wiz_only"] && !wizardp(me))
                	return 0;

                if( channels[verb]["arch_only"] && wiz_level(me)<wiz_level("(arch)"))
                	return 0;

                if(channels[verb]["party_only"] && !me->query("family/family_name"))
                	return notify_fail("你还是先加入一个门派再说吧。\n");

                if (channels[verb]["party_only"]){
                	party = me->query("family/family_name");
                	channels[verb]["msg_speak"] = HIG "【"+party+"】%s：%s\n" NOR;
                	channels[verb]["msg_emote"] = HIG "【"+party+"】%s" NOR;
               }

                // 97-10-22 check if this player age > 24 if use es channel
                if( channels[verb]["xkx_only"] ) {
                        if( wiz_level(me) < 1 )
                                if( me->query("age") < 25 )
                                        return 0;
                }
        // check if same channel message but not wizard
        if( !wizardp(me))
                if( arg==(string)me->query_temp("last_channel_msg") )
        		return notify_fail("用交谈频道说话请不要重复相同的讯息。\n");

        if( !wizardp(me) && living(me) ) {
                me->set_temp("last_channel_msg", arg);
                me->add_temp("channel_msg_cnt", 1);
        }

        // If we speaks something in this channel, then must tune it in.
        tuned_ch = me->query("channels");
        if( !pointerp(tuned_ch) )
                me->set("channels", ({ verb }) );
        else if( member_array(verb, tuned_ch)==-1 )
        	me->set("channels", tuned_ch + ({ verb }) );
        }

        // Support of channel emote
        if( emote  && me->is_character() ) {
        	string vb, emote_arg, id, mud;

        	if( sscanf(arg, "%s %s", vb, emote_arg)!= 2 ) {
                	vb = arg;
                	emote_arg = "";
                }

//        if( channels[verb]["intermud_emote"]
//        && sscanf(emote_arg, "%s@%s", id, mud)==2 ) {
//                REMOTE_Q->send_remote_q(mud, verb, me->query("id"), id, vb);
//                write("网路讯息已送出，请稍候。\n");
//                return 1;
//                }

        if( channels[verb]["intermud_emote"] )
                arg = EMOTE_D->do_emote(me, vb, emote_arg, 3);
        else if( verb == "rumor" )
                arg = EMOTE_D->do_emote(me, vb, emote_arg, 2, channels[verb]["anonymous"]);
        else
                arg = EMOTE_D->do_emote(me, vb, emote_arg, 1);

        if (!arg && emote == 2)
		arg = (channels[verb]["anonymous"]?channels[verb]["anonymous"]:me->name()) + vb + "\n";

        if( !arg ) {
                // we should only allow chinese emote.
                if( vb[0] < 128 ) return 0;
                if( channels[verb]["anonymous"] )
                        arg = channels[verb]["anonymous"]+vb+" "+emote_arg+"\n";

                else if( channels[verb]["intermud_emote"] )
                        arg = sprintf("%s(%s@%s)%s %s\n", me->name(),
                                capitalize(me->query("id")), INTERMUD_MUD_NAME,vb, emote_arg);
                       else    arg = me->name()+vb+" "+emote_arg+"\n";
                }
        }

        // Make the identity of speaker.
        if( channels[verb]["anonymous"] ) {
                who = channels[verb]["anonymous"];
        if (userp(me))
                do_channel( this_object(), "sys", sprintf("%s(%s)正在向%s频道发出信息。",me->query("name"),me->query("id"),verb) );
        }

        else if( userp(me) || !stringp(who = me->query("channel_id")) )
                who = me->name() + "[" + capitalize(me->query("id")) + "]";

        // Ok, now send the message to those people listening us.
        ob = filter_array( users(), "filter_listener", this_object(), channels[verb] );
        if( !arg || arg == "" || arg == " " ) arg = "...";

        if( emote ) {
                string localmsg = arg;
                string ecol=channels[verb]["msg_color"];
                if(remote) arg=arg_bk;
                if(emote==2 && !arg)
                        arg=me->name()+"["+me->query("id")+"@"+INTERMUD_MUD_NAME+"]"+arg+"\n";
                if(!stringp(arg)) return 0;

                if ( channels[verb]["msg_emote"] )
                        localmsg = remove_addresses(arg, 0); // 98-1-22 14:30

                if( channels[verb]["omit_address"] ) localmsg = remove_addresses(arg, 1);
                else if( channels[verb]["intermud_emote"] ) localmsg = remove_addresses(arg, 0);
                if(!stringp(localmsg)) return 0;
                        message( "channel:" + verb,  sprintf( channels[verb]["msg_emote"],
                                sprintf(localmsg,ecol,ecol,ecol)), ob );
                        }
                else
                        message( "channel:" + verb, sprintf( channels[verb]["msg_speak"], who, arg ), ob );

        if( arrayp(channels[verb]["extra_listener"]) ) {
                channels[verb]["extra_listener"] -= ({ 0 });
                if( sizeof(channels[verb]["extra_listener"]) )
                        channels[verb]["extra_listener"]->relay_channel(me, verb, arg);
                }

        if( !undefinedp(channels[verb]["intermud"])&&me->is_character()) {
                channels[verb]["intermud"]->send_msg(
                channels[verb]["channel"], me->query("id"), me->name(1), arg, emote,
                channels[verb]["filter"] );
        }

        return 1;
}

int filter_listener(object ppl, mapping ch)
{
        // Don't bother those in the login limbo.
        if( !environment(ppl) ) return 0;

        if( ch["arch_only"])
                if( userp(ppl) )
                        if( wiz_level(ppl) < wiz_level("(arch)") )
                                return 0;

        if( ch["wiz_only"] )
                if( userp(ppl) )
                        return wizardp(ppl);

        if( ch["xkx_only"] ) {
                if( wiz_level(ppl) > 0 ) return 1;
                if( ppl->query("age") > 23 ) return 1;
                return 0;
        }
        return 1;
}

void register_relay_channel(string channel)
{
        object ob;
        ob = previous_object();
        if( undefinedp(channels[channel]) || !ob) return;
        if( arrayp(channels[channel]["extra_listener"]) ) {
        if( member_array(ob, channels[channel]["extra_listener"]) >=0 ) return;
        channels[channel]["extra_listener"] += ({ ob });
        }
        else  channels[channel]["extra_listener"] = ({ ob });
}

string remove_addresses(string msg, int all)
{
        int i;
        mixed tmp;
        string pattern;

        if(!stringp(msg)) return msg;
        if( all )
                pattern = "[(][A-Za-z]+@[a-zA-Z]+[0-9]+[.]?[)]";
        else
                pattern = "[(][A-Za-z]+@"+INTERMUD_MUD_NAME+"[)]";

        tmp = reg_assoc(msg, ({pattern}), ({1}));

        if(!arrayp(tmp)) return msg;
        msg = "";
        for(i=0; i< sizeof(tmp[0]); i++)
                if( tmp[1][i] == 0 ) msg += tmp[0][i];
        return msg;
}

